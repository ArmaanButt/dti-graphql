type Query {
  evalMetric(
    type: String!
    id: String!
    metric: Metric!
    interval: Interval!
    start: String!
    end: String!
  ): MetricResult
  getArticleMetadata(biblioEntryId: String!): [ArticleMetaData]
  LineListRecord(filter: String): [LineListRecord]
  OutbreakLocation(filter: String): [OutbreakLocation]
  BiologicalAsset(filter: String): [BiologicalAsset]
  Sequence(filter: String): [Sequence]
  Subsequence(filter: String): [Subsequence]
  AminoAcidLookup(filter: String): [AminoAcidLookup]
  NucleotideLookup(filter: String): [NucleotideLookup]
  BiblioEntry(filter: String): [BiblioEntry]
  TherapeuticAsset(filter: String): [TherapeuticAsset]
  ExternalLink(filter: String): [ExternalLink]
}

type OutbreakLocation {
  id: ID
  name: String
  fips: String
  population2018: Int
}

type LineListRecord {
  id: ID
  location: String
  locationType: String
  isGroundZero: Boolean
  livesInGroundZero: Boolean
  traveledToGroundZero: Boolean
  relevantTravelHistoryLocation: String
  recordSource: String
  gender: String
  age: Int
  ageRange: String
  groundZeroExposure: String
  chronicDisease: String
  symptomStartDate: String
  symptoms: String
  caseConfirmationDate: String
  hospitalAdmissionDate: String
  relevantTravelHistoryDates: String
  outcome: String
  didDie: Boolean
  didRecover: Boolean
  outcomeDate: String
  notes: String
  lineListSource: String
}

type BiologicalAsset {
  id: ID
  assetType: String
  genus: String
  family: String
  species: String
  authors: String
  genBankTitle: String
  publications: String
  name: String
  location: String
  host: String
  isolationSource: String
  collectionDate: String
}

type Sequence {
  id: ID
  sequence: String
  sequenceType: String
  length: Int
}

type Subsequence {
  parent: Sequence
  startIndex: Int
  endIndex: Int
}

type AminoAcidLookup {
  id: ID
  name: String
  abbreviation: String
}

type NucleotideLookup {
  id: ID
  name: String
  abbreviation: String
}

type BiblioEntry {
  id: String
  sha: String
  source: String
  title: String
  doi: String
  pmcid: String
  pubmedId: String
  license: String
  abstractText: String
  publishTime: String
  authors: String
  journal: String
  url: String
  idMsftPaper: String
  whoCovidence: String
  hasFullText: Boolean
  fullTextFile: String
}

type TherapeuticAsset {
  id: ID
  productType: String
  description: String
  clinicalTrialsOtherDiseases: String
  developer: String
  stageOfDevelopment: String
  fundingSources: String
  nextSteps: String
  therapyType: String
  origin: String
  target: String
}

type ExternalLink {
  id: ID
  urlType: String
  url: String
  therapeuticAsset: String
  origin: String
}

type MetricResult {
  type: String
  count: Int
  dates: [String]
  start: String
  end: String
  data: [String]
  missing: [Int]
  interval: String
  timeZone: String
}

type ArticleMetaData {
  value: String
}

enum Metric {
  JHU_ConfirmedCases
  JHU_ConfirmedDeaths
  JHU_ConfirmedRecoveries
  CovidTrackingProject_ConfirmedCases
  CovidTrackingProject_ConfirmedDeaths
  CovidTrackingProject_ConfirmedHospitalizations
  CovidTrackingProject_NegativeTests
  CovidTrackingProject_PendingTests
  ECDC_ConfirmedCases
  ECDC_ConfirmedDeaths
  NYT_ConfirmedCases
  NYT_ConfirmedDeaths
  WHO_ConfirmedCases
  WHO_ConfirmedDeaths
}

enum Interval {
  HOUR
  DAY
  MONTH
  YEAR
}
